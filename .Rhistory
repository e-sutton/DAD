print("Hello World!")
1+2
demo()
smooth
print("hello world!")
#comments
source('~/.active-rstudio-document')
print(b)
a = 1
b <- 2
print(b)
a
b
total = 9000
total = total + 1000
print(total)
celciusInput <- readline("Please enter a celcius value:")
fahrResults <- ((9/5)*celciusNumeric)+32)
fahrString <- sprintf("%.2f",fahrString)
message <- paste("the result is", fahrString, sep=" ")
print(message)
celciusInput <- readline("Please enter a celcius value:")
fahrResults <- ((9/5)*celciusNumeric)+32)
fahrString <- sprintf("%.2f",fahrString)
message <- paste("the result is", fahrString, sep=" ")
print(message)
celciusInput <- readline("Please enter a celcius value:")
celciusNumeric <- as.numeric(celciusInput)
fahrResults <- ((9/5)*celciusNumeric)+32)
fahrString <- sprintf("%.2f",fahrString)
message <- paste("the result is", fahrString, sep=" ")
print(message)
celciusNumeric <- as.numeric(celciusInput)
fahrResults <- ((9/5)*celciusNumeric)+32)
celciusNumeric <- as.numeric(celciusInput)
fahrResults <- ((9/5)*celciusNumeric)+32
fahrString <- sprintf("%.2f",fahrString)
message <- paste("the result is", fahrString, sep=" ")
print(message)
celciusNumeric <- as.numeric(celciusInput)
fahrResults <- ((9/5)*celciusNumeric)+32
fahrString <- sprintf("%.2f",fahrString)
celciusNumeric <- as.numeric(celciusInput)
fahrResults <- ((9/5)*celciusNumeric)+32
fahrString <- sprintf("%.2f",fahrResults)
message <- paste("the result is", fahrString, sep=" ")
print(message)
print(message)
celciusInput <- readline("Please enter a celcius value:")
celciusNumeric <- as.numeric(celciusInput)
fahrResults <- ((9/5)*celciusNumeric)+32
fahrString <- sprintf("%.2f",fahrResults)
message <- paste("the result is", fahrString, sep=" ")
print(message)
typeof(celciusNumeric)
is.integer(celciusNumeric)
as.character(celciusNumeric)
weight <- as.numeric(readline("How many kg does your bag weigh?"))
print("You have exceeded the limit!")
}
weight <- as.numeric(readline("How many kg does your bag weigh?"))
if (weight > 15){
print("You have exceeded the limit!")
}
if (num %% 2 == 0) {
print("Even Number")
} else{
print("odd number")
}
num = 5
if (num %% 2 == 0) {
print("Even Number")
} else{
print("odd number")
}
num = 6
if (num %% 2 == 0) {
print("Even Number")
} else{
print("odd number")
}
?regexpr
regexpr("eoin","eoin sutton")
fahrToCel(32)
# Fahrenheit to Celsius conversion
fahrToCel <- function(fahr) {
cel <- ((fahr - 32) / 9) * 5
return(cel)
}
fahrToCel <- function(fahr) {
cel <- ((fahr - 32) / 9) * 5
return(cel)
}
fahrToCel(32)
fahrToCel(1)
# Fahrenheit to Celsius conversion
fahrToCel <- function(fahr) {
cel <<- ((fahr - 32) / 9) * 5
return(cel)
}
# We can call the function as follows
fahrToCel(32)
fahrToCel(1)
# First we need to actually make a file, with some content in it
myfile = file("numbers.txt", open = "w")
write(1, myfile, append = T)
write(2, myfile, sep = "\n")
write(3, myfile, sep = "\n")
write(4, myfile, sep = "\n")
close(myfile)
# First we need to actually make a file, with some content in it
myfile = file("numbers.txt", open = "w")
write(1, myfile, append = T)
write(2, myfile, sep = "\n")
write(3, myfile, sep = "\n")
write(4, myfile, sep = "\n")
close(myfile)
readNumbers <- function(filename) {
inputFile = file(filename, open="r")
vectorOfNumbers = c()
lines = readLines(inputFile)
for (i in 1:length(lines)){
vectorOfNumbers = c(vectorOfNumbers, as.numeric(lines[i]))
}
close(inputFile)
return(vectorOfNumbers)
}
calcAverage <- function(v) {
return (sum(v)/length(v))
}
# First we need to actually make a file, with some content in it
myfile = file("numbers.txt", open = "w")
write(1, myfile, append = T)
write(2, myfile, sep = "\n")
write(3, myfile, sep = "\n")
write(4, myfile, sep = "\n")
close(myfile)
# Function to read numbers
readNumbers <- function(filename) {
inputFile = file(filename, open="r")
vectorOfNumbers = c()
lines = readLines(inputFile)
for (i in 1:length(lines)){
vectorOfNumbers = c(vectorOfNumbers, as.numeric(lines[i]))
}
close(inputFile)
return(vectorOfNumbers)
}
# Function to compute average
calcAverage <- function(v) {
return (sum(v)/length(v))
}
# Function to write output
writeAv <- function(filename, num){
outFile <- file(filename, open="w")
write(as.character(num), outFile)
close(outFile)
}
readFrom <- "Numbers.txt"
writeTo <- "RAverage.txt"
writeAv(writeTo,calcAverage(readNumbers(readFrom)))
View(ToothGrowth)
minLen = min(ToothGrowth$len)
minLen
avgLen = mean(ToothGrowth$len)
avgLen
summary(ToothGrowth)
png("Lab8_Histogram_Tooth_Length.png", width = 5, height = 5, units = "in", res = 300)
hist(ToothGrowth$len, breaks = 15, main = "Histogram of Tooth Length", xlab = "Tooth Length")
dev.off()
hist(ToothGrowth$len, breaks = 15, main = "Histogram of Tooth Length", xlab = "Tooth Length")
png("Lab8_Histogram_Tooth_Length.png", width = 5, height = 5, units = "in", res = 300)
subsetVC = subset(ToothGrowth, supp == "VC")
subsetVC = subset(ToothGrowth, supp == "VC")
numObsVC = length(subsetVC$supp)
install.packages(c("e1071", "C50", "ggplot2", "hexbin","descr", "caret", "e1071"))
library(hexbin)
library(ggplot2)
library(caret)
library(descr)
library(C50)
data <- read.csv("default of credit card clients.csv", stringsAsFactors=F)
data <- read.csv("default of credit card clients.csv", stringsAsFactors=F)
View(data)
data <- data[-1]
str(data)
View(data)
data <- read.csv("default of credit card clients.csv", stringsAsFactors=F)
View(data)
data$SEX
data$SEX <- factor(data$SEX, levels=c(1, 2), labels=c("M", "F"))
table(data$EDUCATION, useNA='ifany')
table(data$MARRIAGE, useNA='ifany')
data$EDUCATION <- factor(data$EDUCATION, levels=c(0, 1, 2, 3, 4, 5, 6), labels=c(NA, "GS", "UNI", "HS", "O1", "O2", "O3"))
data$MARRIAGE <- factor(data$MARRIAGE, levels=c(0, 1, 2, 3), labels=c(NA, "M", "S", "O"))
data$default.payment.next.month <- factor(data$default.payment.next.month, levels=c(0, 1), labels=c("N", "Y"))
# Descriptive statistics and plots
mean(data$LIMIT_BAL)
summary(data$LIMIT_BAL)
median(data$LIMIT_BAL)
sd(data$LIMIT_BAL)
IQR(data$LIMIT_BAL)
mad(data$LIMIT_BAL)
boxplot(data$LIMIT_BAL)
hist(data$LIMIT_BAL, freq=F)
lines(density(data$LIMIT_BAL), lwd=3, col="blue")
ggplot(data, aes(x=LIMIT_BAL, y=AGE)) + stat_binhex(colour="white") +
theme_bw() + scale_fill_gradient(low="white", high="blue") +
labs(x="Limit Balance", y="Age")
ggplot(data, aes(x=LIMIT_BAL, y=AGE)) + stat_binhex(colour="white") +
theme_bw() + scale_fill_gradient(low="white", high="blue") +
labs(x="Limit Balance", y="Age") +
facet_wrap("EDUCATION")
CrossTable(data$EDUCATION, data$default.payment.next.month, prop.c=F, prop.t=F, prop.chisq=F)
boxplot(LIMIT_BAL ~ EDUCATION, data=data)
ggplot(data=data, aes(EDUCATION, LIMIT_BAL)) +
geom_violin(fill="lightblue") +
geom_boxplot( alpha=.2)
# Randomise data
data_rand <- data[order(runif(10000)), ]
summary(data$LIMIT_BAL)
summary(data_rand$LIMIT_BAL)
# Create test and train subsets
train <- data_rand[1:9000, ]
test <- data_rand[9001:10000, ]
prop.table(table(train$default.payment.next.month))
prop.table(table(test$default.payment.next.month))
# Train the classifier (i.e., decusion tree)
credit_model <- C5.0(train[-24], train$default.payment.next.month)
credit_model
summary(credit_model)
#Evaluate the model
credit_pred <- predict(credit_model, test)
CrossTable(test$default.payment.next.month, credit_pred,prop.chisq = FALSE, prop.c = FALSE, prop.r = FALSE, dnn = c('actual default', 'predicted default'))
confusionMatrix(credit_pred, test$default.payment.next.month, positive = "Y")
data$SEX <- factor(data$SEX, levels=c(1, 2), labels=c("M", "F"))
table(data$EDUCATION, useNA='ifany')
table(data$MARRIAGE, useNA='ifany')
data$EDUCATION <- factor(data$EDUCATION, levels=c(0, 1, 2, 3, 4, 5, 6), labels=c(NA, "GS", "UNI", "HS", "O1", "O2", "O3"))
data$MARRIAGE <- factor(data$MARRIAGE, levels=c(0, 1, 2, 3), labels=c(NA, "M", "S", "O"))
data$default.payment.next.month <- factor(data$default.payment.next.month, levels=c(0, 1), labels=c("N", "Y"))
str(data)
summary(data)
mean(data$LIMIT_BAL)
summary(data$LIMIT_BAL)
median(data$LIMIT_BAL)
sd(data$LIMIT_BAL)
IQR(data$LIMIT_BAL)
mad(data$LIMIT_BAL)
boxplot(data$LIMIT_BAL)
hist(data$LIMIT_BAL, freq=F)
lines(density(data$LIMIT_BAL), lwd=3, col="blue")
ggplot(data, aes(x=LIMIT_BAL, y=AGE)) + stat_binhex(colour="white") +
ggplot(data, aes(x=LIMIT_BAL, y=AGE)) + stat_binhex(colour="white") +
theme_bw() + scale_fill_gradient(low="white", high="blue") +
labs(x="Limit Balance", y="Age")
boxplot(LIMIT_BAL ~ EDUCATION, data=data)
getwd()
data <- read.csv("default of credit card clients.csv", stringsAsFactors=F)
data <- data[-1]
str(data)
View(data)
data$SEX <- factor(data$SEX, levels=c(1, 2), labels=c("M", "F"))
table(data$EDUCATION, useNA='ifany')
table(data$MARRIAGE, useNA='ifany')
data$EDUCATION <- factor(data$EDUCATION, levels=c(0, 1, 2, 3, 4, 5, 6), labels=c(NA, "GS", "UNI", "HS", "O1", "O2", "O3"))
data$MARRIAGE <- factor(data$MARRIAGE, levels=c(0, 1, 2, 3), labels=c(NA, "M", "S", "O"))
data$default.payment.next.month <- factor(data$default.payment.next.month, levels=c(0, 1), labels=c("N", "Y"))
str(data)
summary(data)
# Descriptive statistics and plots
mean(data$LIMIT_BAL)
summary(data$LIMIT_BAL)
median(data$LIMIT_BAL)
sd(data$LIMIT_BAL)
IQR(data$LIMIT_BAL)
mad(data$LIMIT_BAL)
boxplot(data$LIMIT_BAL)
hist(data$LIMIT_BAL, freq=F)
lines(density(data$LIMIT_BAL), lwd=3, col="blue")
ggplot(data, aes(x=LIMIT_BAL, y=AGE)) + stat_binhex(colour="white") +
theme_bw() + scale_fill_gradient(low="white", high="blue") +
labs(x="Limit Balance", y="Age")
ggplot(data, aes(x=LIMIT_BAL, y=AGE)) + stat_binhex(colour="white") +
theme_bw() + scale_fill_gradient(low="white", high="blue") +
labs(x="Limit Balance", y="Age") +
facet_wrap("EDUCATION")
CrossTable(data$EDUCATION, data$default.payment.next.month, prop.c=F, prop.t=F, prop.chisq=F)
data <- read.csv("default of credit card clients.csv", stringsAsFactors=F)
data <- read.csv("default of credit card clients.csv", stringsAsFactors=F)
boxplot(data$LIMIT_BAL)
boxplot(data$LIMIT_BAL)
hist(data$LIMIT_BAL, freq=F)
data <- read.csv("default of credit card clients.csv", stringsAsFactors=F)
data <- data[-1]
str(data)
View(data)
data$SEX <- factor(data$SEX, levels=c(1, 2), labels=c("M", "F"))
table(data$EDUCATION, useNA='ifany')
table(data$MARRIAGE, useNA='ifany')
data$EDUCATION <- factor(data$EDUCATION, levels=c(0, 1, 2, 3, 4, 5, 6), labels=c(NA, "GS", "UNI", "HS", "O1", "O2", "O3"))
data$MARRIAGE <- factor(data$MARRIAGE, levels=c(0, 1, 2, 3), labels=c(NA, "M", "S", "O"))
data$default.payment.next.month <- factor(data$default.payment.next.month, levels=c(0, 1), labels=c("N", "Y"))
str(data)
summary(data)
# Descriptive statistics and plots
mean(data$LIMIT_BAL)
summary(data$LIMIT_BAL)
median(data$LIMIT_BAL)
sd(data$LIMIT_BAL)
IQR(data$LIMIT_BAL)
mad(data$LIMIT_BAL)
boxplot(data$LIMIT_BAL)
hist(data$LIMIT_BAL, freq=F)
lines(density(data$LIMIT_BAL), lwd=3, col="blue")
ggplot(data, aes(x=LIMIT_BAL, y=AGE)) + stat_binhex(colour="white") +
theme_bw() + scale_fill_gradient(low="white", high="blue") +
labs(x="Limit Balance", y="Age")
library(ggplot2)
install.packages(c("e1071", "C50", "ggplot2", "hexbin","descr", "caret", "e1071"))
library(e1071)
library(hexbin)
library(ggplot2)
library(caret)
library(descr)
library(C50)
install.packages(c("e1071", "C50", "ggplot2", "hexbin", "descr",
subPS97 = subset(subsetPS, Year == 1997)
setwd("/Users/Eoin/Documents/BSHCE/Year 4/DAD/DAD")
#libraries
library(ggplot2)
#read in video game sales csv
vgData = read.csv("vgsales.csv", stringsAsFactors = F)
View(vgData)
mean(vgData$EU_Sales)
boxplot(vgData$NA_Sales)
#get subset data of each platform
subsetWii = subset(vgData, Platform == "Wii")
subsetNES = subset(vgData, Platform == "NES")
subsetGB = subset(vgData, Platform == "GB")
subsetDS = subset(vgData, Platform == "DS")
subsetX360 = subset(vgData, Platform == "X360")
subsetPS3 = subset(vgData, Platform == "PS3")
subsetPS2 = subset(vgData, Platform == "PS2")
subsetSNES = subset(vgData, Platform == "SNES")
subsetGBA = subset(vgData, Platform == "GBA")
subset3DS = subset(vgData, Platform == "3DS")
subsetPS4 = subset(vgData, Platform == "PS4")
subsetN64 = subset(vgData, Platform == "N64")
subsetPS = subset(vgData, Platform == "PS")
subsetXB = subset(vgData, Platform == "XB")
subsetPC = subset(vgData, Platform == "PC")
subset2600 = subset(vgData, Platform == "2600")
subsetPSP = subset(vgData, Platform == "PSP")
subsetXOne = subset(vgData, Platform == "XOne")
subsetGC = subset(vgData, Platform == "GC")
subsetWiiU = subset(vgData, Platform == "WiiU")
subsetGEN = subset(vgData, Platform == "GEN")
subsetDC = subset(vgData, Platform == "DC")
subsetPSV = subset(vgData, Platform == "PSV")
subsetSAT = subset(vgData, Platform == "SAT")
subsetSCD = subset(vgData, Platform == "SCD")
subsetWS = subset(vgData, Platform == "WS")
subsetNG = subset(vgData, Platform == "NG")
subsetTG16 = subset(vgData, Platform == "TG16")
subset3DO = subset(vgData, Platform == "3DO")
subsetGG = subset(vgData, Platform == "GG")
subsetPCFX = subset(vgData, Platform == "PCFX")
#count total num
totalNum = length(vgData$Rank)
round(totalNum, digits = 2)
#get numbers/percentages
percWii = round((length(subsetWii$Platform)/totalNum * 100), digits = 2)
percNES = round((length(subsetNES$Platform)/totalNum * 100), digits = 2)
percGB = round((length(subsetGB$Platform)/totalNum * 100), digits = 2)
percDS = round((length(subsetDS$Platform)/totalNum * 100), digits = 2)
percX360 = round((length(subsetX360$Platform)/totalNum * 100), digits = 2)
percPS3 = round((length(subsetPS3$Platform)/totalNum * 100), digits = 2)
percPS2 = round((length(subsetPS2$Platform)/totalNum * 100), digits = 2)
percSNES = round((length(subsetSNES$Platform)/totalNum * 100), digits = 2)
percGBA = round((length(subsetGBA$Platform)/totalNum * 100), digits = 2)
perc3DS = round((length(subset3DS$Platform)/totalNum * 100), digits = 2)
percPS4 = round((length(subsetPS4$Platform)/totalNum * 100), digits = 2)
percN64 = round((length(subsetN64$Platform)/totalNum * 100), digits = 2)
percPS = round((length(subsetPS$Platform)/totalNum * 100), digits = 2)
percXB = round((length(subsetXB$Platform)/totalNum * 100), digits = 2)
percPC = round((length(subsetPC$Platform)/totalNum * 100), digits = 2)
perc2600 = round((length(subset2600$Platform)/totalNum * 100), digits = 2)
percPSP = round((length(subsetPSP$Platform)/totalNum * 100), digits = 2)
percXOne = round((length(subsetXOne$Platform)/totalNum * 100), digits = 2)
percGC = round((length(subsetGC$Platform)/totalNum * 100), digits = 2)
percWiiU = round((length(subsetWiiU$Platform)/totalNum * 100), digits = 2)
percGEN = round((length(subsetGEN$Platform)/totalNum * 100), digits = 2)
percDC = round((length(subsetDC$Platform)/totalNum * 100), digits = 2)
percPSV = round((length(subsetPSV$Platform)/totalNum * 100), digits = 2)
percSAT = round((length(subsetSAT$Platform)/totalNum * 100), digits = 2)
percSCD = round((length(subsetSCD$Platform)/totalNum * 100), digits = 2)
percWS = round((length(subsetWS$Platform)/totalNum * 100), digits = 2)
percNG = round((length(subsetNG$Platform)/totalNum * 100), digits = 2)
percTG16 = round((length(subsetTG16$Platform)/totalNum * 100), digits = 2)
perc3DO = round((length(subset3DO$Platform)/totalNum * 100), digits = 2)
percGG = round((length(subsetGG$Platform)/totalNum * 100), digits = 2)
percPCFX = round((length(subsetPCFX$Platform)/totalNum * 100), digits = 2)
#create vector of percentages
percVector = c(percWii,percNES,percGB,percDS,percX360,percPS3,percPS2,percSNES,percGBA,perc3DS,percPS4,percN64,percPS,percXB,percPC,perc2600,percPSP,percXOne,percGC,percWiiU,percGEN,percDC,percPSV,percSAT,percSCD,percWS,percNG,percTG16,perc3DO,percGG,percPCFX)
sliceNames = c("Wii","NES","GB","DS","X360","PS3","PS2","SNES","GBA","3DS","PS4","N64","PS","XB","PC","2600","PSP","XOne","GC","WiiU","GEN","DC","PSV","SAT","SCD","WS","NG","TG16","3DO","GG","PCFX")
subPS97 = subset(subsetPS, Year == 1997)
eusales = round(sum(subPS97$EU_Sales), digits = 3)
nasales = round(sum(subPS97$NA_Sales), digits = 3)
#get eu sales totals per category
aggregate(vgData$EU_Sales, by=(list(Category=vgData$Genre)), FUN=sum)
ggplot(subsetPS, aes(x=Genre, y=Global_Sales)) + stat_binhex(colour="white") +
theme_bw() + scale_fill_gradient(low="white", high="blue") +
labs(x="Genre", y="Global Sales (Million)")+
coord_cartesian(ylim = c(0, 10))+
scale_y_continuous(breaks=seq(0,10,0.5), expand = c(0, 0))
ggplot(data=subsetX360, aes(Genre, Global_Sales)) +
geom_violin(fill="lightblue") +
geom_boxplot( alpha=.2)
View(vgData)
library(ggplot2)
#read in salaries sales csv
salData = read.csv("salaries.csv", stringsAsFactors = F)
View(salData)
d = data.frame(salData)
d[d$BasePay == "Not Provided",]$BasePay = as.numeric(0)
d[d$OvertimePay == "Not Provided",]$OvertimePay = 0
d[d$OtherPay == "Not Provided",]$OtherPay = 0
d[d$Benefits == "Not Provided",]$Benefits = 0
#change to numeric
d$OvertimePay = as.numeric(as.character(d$OvertimePay))
d$BasePay = as.numeric(as.character(d$BasePay))
d$OtherPay = as.numeric(as.character(d$OtherPay))
d$Benefits = as.numeric(as.character(d$Benefits))
d$TotalPayBenefits = as.numeric(as.character(d$TotalPayBenefits))
#top 10 job titles for pay through 2011-2014
sort(d$TotalPayBenefits, decreasing = TRUE)
top10 = as.data.frame(head(d, 10))
View(top10)
ggplot(data=d, aes(group=Year, Year, TotalPayBenefits)) +
geom_violin(fill="lightblue") +
geom_boxplot( alpha=.2)+
coord_cartesian(ylim = c(0, 1000000))
sumTotalPay = sum(d$TotalPayBenefits)
sumTotalOvertime = sum(d$OvertimePay)
percOvertimeTotal = round((sumTotalOvertime/sumTotalPay) *100,2)
#ggplot of total pay grouped by year
ggplot(fireRoles, aes(x=Year, y=TotalPayBenefits)) + stat_binhex(colour="white") +
theme_bw() + scale_fill_gradient(low="white", high="blue") +
labs(x="year", y="total pay") +   coord_cartesian(ylim = c(0, 400000))+
scale_y_continuous(breaks=seq(0,400000,50000), expand = c(0, 0))
policeRoles = d[(grep("POLICE", toupper(d$JobTitle))),]
sheriffRoles = d[(grep("SHERIFF", toupper(d$JobTitle))),]
#combine
allPoliceRoles = rbind(policeRoles,sheriffRoles)
fireRoles = d[grep("FIRE",toupper(salData$JobTitle)),]
ggplot(allPoliceRoles, aes(x=Year, y=TotalPayBenefits)) + stat_binhex(colour="white") +
theme_bw() + scale_fill_gradient(low="white", high="blue") +
labs(x="year", y="total pay") +   coord_cartesian(ylim = c(0, 400000))+
scale_y_continuous(breaks=seq(0,400000,50000), expand = c(0, 0))
ggplot(fireRoles, aes(x=Year, y=TotalPayBenefits)) + stat_binhex(colour="white") +
theme_bw() + scale_fill_gradient(low="white", high="blue") +
labs(x="year", y="total pay") +   coord_cartesian(ylim = c(0, 400000))+
scale_y_continuous(breaks=seq(0,400000,50000), expand = c(0, 0))
ggplot(allPoliceRoles, aes(x=Year, y=TotalPayBenefits)) + stat_binhex(colour="white") +
theme_bw() + scale_fill_gradient(low="white", high="blue") +
labs(x="year", y="total pay") +   coord_cartesian(ylim = c(0, 400000))+
scale_y_continuous(breaks=seq(0,400000,50000), expand = c(0, 0))
ggplot(data=d, aes(group=Year, Year, OvertimePay)) +
geom_violin(fill="lightblue") +
geom_boxplot( alpha=.2)+
coord_cartesian(ylim = c(0, 250000))
